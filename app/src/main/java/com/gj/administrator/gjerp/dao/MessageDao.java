package com.gj.administrator.gjerp.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.gj.administrator.gjerp.domain.Dialog;

import com.gj.administrator.gjerp.domain.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Msg_type = new Property(3, String.class, "msg_type", false, "MSG_TYPE");
        public final static Property Msg_time = new Property(4, java.util.Date.class, "msg_time", false, "MSG_TIME");
        public final static Property Name_type = new Property(5, String.class, "name_type", false, "NAME_TYPE");
        public final static Property Name_id = new Property(6, Long.class, "name_id", false, "NAME_ID");
        public final static Property Dialog_id = new Property(7, Long.class, "dialog_id", false, "DIALOG_ID");
    };

    private DaoSession daoSession;

    private Query<Message> dialog_MessagesQuery;

    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONTENT\" TEXT NOT NULL ," + // 1: content
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"MSG_TYPE\" TEXT NOT NULL ," + // 3: msg_type
                "\"MSG_TIME\" INTEGER NOT NULL ," + // 4: msg_time
                "\"NAME_TYPE\" TEXT," + // 5: name_type
                "\"NAME_ID\" INTEGER," + // 6: name_id
                "\"DIALOG_ID\" INTEGER);"); // 7: dialog_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getContent());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getMsg_type());
        stmt.bindLong(5, entity.getMsg_time().getTime());
 
        String name_type = entity.getName_type();
        if (name_type != null) {
            stmt.bindString(6, name_type);
        }
 
        Long name_id = entity.getName_id();
        if (name_id != null) {
            stmt.bindLong(7, name_id);
        }
 
        Long dialog_id = entity.getDialog_id();
        if (dialog_id != null) {
            stmt.bindLong(8, dialog_id);
        }
    }

    @Override
    protected void attachEntity(Message entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // content
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // msg_type
            new java.util.Date(cursor.getLong(offset + 4)), // msg_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name_type
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // name_id
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // dialog_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setMsg_type(cursor.getString(offset + 3));
        entity.setMsg_time(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setName_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setDialog_id(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "messages" to-many relationship of Dialog. */
    public List<Message> _queryDialog_Messages(Long dialog_id) {
        synchronized (this) {
            if (dialog_MessagesQuery == null) {
                QueryBuilder<Message> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Dialog_id.eq(null));
                queryBuilder.orderRaw("T.'MSG_TIME' DESC");
                dialog_MessagesQuery = queryBuilder.build();
            }
        }
        Query<Message> query = dialog_MessagesQuery.forCurrentThread();
        query.setParameter(0, dialog_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDialogDao().getAllColumns());
            builder.append(" FROM MESSAGE T");
            builder.append(" LEFT JOIN DIALOG T0 ON T.\"DIALOG_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Message loadCurrentDeep(Cursor cursor, boolean lock) {
        Message entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Dialog dialog = loadCurrentOther(daoSession.getDialogDao(), cursor, offset);
        entity.setDialog(dialog);

        return entity;    
    }

    public Message loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Message> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Message> list = new ArrayList<Message>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Message> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Message> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
