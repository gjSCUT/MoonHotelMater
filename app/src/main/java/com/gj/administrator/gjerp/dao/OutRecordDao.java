package com.gj.administrator.gjerp.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.gj.administrator.gjerp.domain.Customer;
import com.gj.administrator.gjerp.domain.Room;

import com.gj.administrator.gjerp.domain.OutRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OUT_RECORD".
*/
public class OutRecordDao extends AbstractDao<OutRecord, Long> {

    public static final String TABLENAME = "OUT_RECORD";

    /**
     * Properties of entity OutRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Arrive_date = new Property(1, java.util.Date.class, "arrive_date", false, "ARRIVE_DATE");
        public final static Property Leave_date = new Property(2, java.util.Date.class, "leave_date", false, "LEAVE_DATE");
        public final static Property Consumption = new Property(3, double.class, "consumption", false, "CONSUMPTION");
        public final static Property Guest_id = new Property(4, long.class, "guest_id", false, "GUEST_ID");
        public final static Property Room_id = new Property(5, long.class, "room_id", false, "ROOM_ID");
    };

    private DaoSession daoSession;


    public OutRecordDao(DaoConfig config) {
        super(config);
    }
    
    public OutRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OUT_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ARRIVE_DATE\" INTEGER NOT NULL ," + // 1: arrive_date
                "\"LEAVE_DATE\" INTEGER NOT NULL ," + // 2: leave_date
                "\"CONSUMPTION\" REAL NOT NULL ," + // 3: consumption
                "\"GUEST_ID\" INTEGER NOT NULL ," + // 4: guest_id
                "\"ROOM_ID\" INTEGER NOT NULL );"); // 5: room_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OUT_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OutRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getArrive_date().getTime());
        stmt.bindLong(3, entity.getLeave_date().getTime());
        stmt.bindDouble(4, entity.getConsumption());
        stmt.bindLong(5, entity.getGuest_id());
        stmt.bindLong(6, entity.getRoom_id());
    }

    @Override
    protected void attachEntity(OutRecord entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OutRecord readEntity(Cursor cursor, int offset) {
        OutRecord entity = new OutRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // arrive_date
            new java.util.Date(cursor.getLong(offset + 2)), // leave_date
            cursor.getDouble(offset + 3), // consumption
            cursor.getLong(offset + 4), // guest_id
            cursor.getLong(offset + 5) // room_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OutRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArrive_date(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setLeave_date(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setConsumption(cursor.getDouble(offset + 3));
        entity.setGuest_id(cursor.getLong(offset + 4));
        entity.setRoom_id(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OutRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OutRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRoomDao().getAllColumns());
            builder.append(" FROM OUT_RECORD T");
            builder.append(" LEFT JOIN CUSTOMER T0 ON T.\"GUEST_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN ROOM T1 ON T.\"ROOM_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected OutRecord loadCurrentDeep(Cursor cursor, boolean lock) {
        OutRecord entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
         if(customer != null) {
            entity.setCustomer(customer);
        }
        offset += daoSession.getCustomerDao().getAllColumns().length;

        Room room = loadCurrentOther(daoSession.getRoomDao(), cursor, offset);
         if(room != null) {
            entity.setRoom(room);
        }

        return entity;    
    }

    public OutRecord loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<OutRecord> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<OutRecord> list = new ArrayList<OutRecord>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<OutRecord> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<OutRecord> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
