package com.gj.administrator.gjerp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gj.administrator.gjerp.domain.Schedule;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCHEDULE".
*/
public class ScheduleDao extends AbstractDao<Schedule, Long> {

    public static final String TABLENAME = "SCHEDULE";

    /**
     * Properties of entity Schedule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Repeat = new Property(3, int.class, "repeat", false, "REPEAT");
        public final static Property Remind_time = new Property(4, java.util.Date.class, "remind_time", false, "REMIND_TIME");
        public final static Property Begin_time = new Property(5, java.util.Date.class, "begin_time", false, "BEGIN_TIME");
        public final static Property Complete_time = new Property(6, java.util.Date.class, "complete_time", false, "COMPLETE_TIME");
    };

    private DaoSession daoSession;


    public ScheduleDao(DaoConfig config) {
        super(config);
    }
    
    public ScheduleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHEDULE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"CONTENT\" TEXT NOT NULL ," + // 2: content
                "\"REPEAT\" INTEGER NOT NULL ," + // 3: repeat
                "\"REMIND_TIME\" INTEGER NOT NULL ," + // 4: remind_time
                "\"BEGIN_TIME\" INTEGER NOT NULL ," + // 5: begin_time
                "\"COMPLETE_TIME\" INTEGER NOT NULL );"); // 6: complete_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHEDULE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Schedule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getContent());
        stmt.bindLong(4, entity.getRepeat());
        stmt.bindLong(5, entity.getRemind_time().getTime());
        stmt.bindLong(6, entity.getBegin_time().getTime());
        stmt.bindLong(7, entity.getComplete_time().getTime());
    }

    @Override
    protected void attachEntity(Schedule entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Schedule readEntity(Cursor cursor, int offset) {
        Schedule entity = new Schedule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.getString(offset + 2), // content
            cursor.getInt(offset + 3), // repeat
            new java.util.Date(cursor.getLong(offset + 4)), // remind_time
            new java.util.Date(cursor.getLong(offset + 5)), // begin_time
            new java.util.Date(cursor.getLong(offset + 6)) // complete_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Schedule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setContent(cursor.getString(offset + 2));
        entity.setRepeat(cursor.getInt(offset + 3));
        entity.setRemind_time(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setBegin_time(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setComplete_time(new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Schedule entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Schedule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
