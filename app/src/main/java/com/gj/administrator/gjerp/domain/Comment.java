package com.gj.administrator.gjerp.domain;

import com.gj.administrator.gjerp.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.gj.administrator.gjerp.dao.CommentDao;
import com.gj.administrator.gjerp.dao.GuestDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "COMMENT".
 */
public class Comment {

    private Long id;
    /** Not-null value. */
    private String advice;
    private String feedback;
    private Long guest_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CommentDao myDao;

    private Guest guest;
    private Long guest__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Comment() {
    }

    public Comment(Long id) {
        this.id = id;
    }

    public Comment(Long id, String advice, String feedback, Long guest_id) {
        this.id = id;
        this.advice = advice;
        this.feedback = feedback;
        this.guest_id = guest_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCommentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getAdvice() {
        return advice;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAdvice(String advice) {
        this.advice = advice;
    }

    public String getFeedback() {
        return feedback;
    }

    public void setFeedback(String feedback) {
        this.feedback = feedback;
    }

    public Long getGuest_id() {
        return guest_id;
    }

    public void setGuest_id(Long guest_id) {
        this.guest_id = guest_id;
    }

    /** To-one relationship, resolved on first access. */
    public Guest getGuest() {
        Long __key = this.guest_id;
        if (guest__resolvedKey == null || !guest__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GuestDao targetDao = daoSession.getGuestDao();
            Guest guestNew = targetDao.load(__key);
            synchronized (this) {
                guest = guestNew;
            	guest__resolvedKey = __key;
            }
        }
        return guest;
    }

    public void setGuest(Guest guest) {
        synchronized (this) {
            this.guest = guest;
            guest_id = guest == null ? null : guest.getId();
            guest__resolvedKey = guest_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
