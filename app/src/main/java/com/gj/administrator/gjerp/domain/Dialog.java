package com.gj.administrator.gjerp.domain;

import java.util.List;
import com.gj.administrator.gjerp.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.gj.administrator.gjerp.dao.DialogDao;
import com.gj.administrator.gjerp.dao.MessageDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "DIALOG".
 */
public class Dialog {

    private Long id;
    private int dialog_type;
    private java.util.Date last_time;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DialogDao myDao;

    private List<Message> messages;

    // KEEP FIELDS - put your custom fields here
    public final static int TYPE_CHAT = 0;
    public final static int TYPE_TASK = 1;
    public final static int TYPE_SCHEDULE = 2;
    public final static String[] TYPE = {"Chat","Task","Schedule"};
    // KEEP FIELDS END

    public Dialog() {
    }

    public Dialog(Long id) {
        this.id = id;
    }

    public Dialog(Long id, int dialog_type, java.util.Date last_time) {
        this.id = id;
        this.dialog_type = dialog_type;
        this.last_time = last_time;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDialogDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getDialog_type() {
        return dialog_type;
    }

    public void setDialog_type(int dialog_type) {
        this.dialog_type = dialog_type;
    }

    public java.util.Date getLast_time() {
        return last_time;
    }

    public void setLast_time(java.util.Date last_time) {
        this.last_time = last_time;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Message> getMessages() {
        if (messages == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageDao targetDao = daoSession.getMessageDao();
            List<Message> messagesNew = targetDao._queryDialog_Messages(id);
            synchronized (this) {
                if(messages == null) {
                    messages = messagesNew;
                }
            }
        }
        return messages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMessages() {
        messages = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
