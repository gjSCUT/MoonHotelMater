package com.gj.administrator.gjerp.domain;

import com.gj.administrator.gjerp.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.gj.administrator.gjerp.dao.DialogDao;
import com.gj.administrator.gjerp.dao.MessageDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "MESSAGE".
 */
public class Message {

    private Long id;
    /** Not-null value. */
    private String content;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String msg_type;
    /** Not-null value. */
    private java.util.Date msg_time;
    private String name_type;
    private Long name_id;
    private Long dialog_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MessageDao myDao;

    private Dialog dialog;
    private Long dialog__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Message() {
    }

    public Message(Long id) {
        this.id = id;
    }

    public Message(Long id, String content, String name, String msg_type, java.util.Date msg_time, String name_type, Long name_id, Long dialog_id) {
        this.id = id;
        this.content = content;
        this.name = name;
        this.msg_type = msg_type;
        this.msg_time = msg_time;
        this.name_type = name_type;
        this.name_id = name_id;
        this.dialog_id = dialog_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMessageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getContent() {
        return content;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContent(String content) {
        this.content = content;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getMsg_type() {
        return msg_type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMsg_type(String msg_type) {
        this.msg_type = msg_type;
    }

    /** Not-null value. */
    public java.util.Date getMsg_time() {
        return msg_time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMsg_time(java.util.Date msg_time) {
        this.msg_time = msg_time;
    }

    public String getName_type() {
        return name_type;
    }

    public void setName_type(String name_type) {
        this.name_type = name_type;
    }

    public Long getName_id() {
        return name_id;
    }

    public void setName_id(Long name_id) {
        this.name_id = name_id;
    }

    public Long getDialog_id() {
        return dialog_id;
    }

    public void setDialog_id(Long dialog_id) {
        this.dialog_id = dialog_id;
    }

    /** To-one relationship, resolved on first access. */
    public Dialog getDialog() {
        Long __key = this.dialog_id;
        if (dialog__resolvedKey == null || !dialog__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DialogDao targetDao = daoSession.getDialogDao();
            Dialog dialogNew = targetDao.load(__key);
            synchronized (this) {
                dialog = dialogNew;
            	dialog__resolvedKey = __key;
            }
        }
        return dialog;
    }

    public void setDialog(Dialog dialog) {
        synchronized (this) {
            this.dialog = dialog;
            dialog_id = dialog == null ? null : dialog.getId();
            dialog__resolvedKey = dialog_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
