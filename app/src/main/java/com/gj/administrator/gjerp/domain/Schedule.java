package com.gj.administrator.gjerp.domain;

import java.util.List;
import com.gj.administrator.gjerp.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.gj.administrator.gjerp.dao.EmployeeDao;
import com.gj.administrator.gjerp.dao.ScheduleDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "SCHEDULE".
 */
public class Schedule {

    private Long id;
    /** Not-null value. */
    private String title;
    /** Not-null value. */
    private String content;
    private int repeat;
    /** Not-null value. */
    private java.util.Date remind_time;
    /** Not-null value. */
    private java.util.Date begin_time;
    /** Not-null value. */
    private java.util.Date complete_time;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ScheduleDao myDao;

    private List<Employee> employees;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Schedule() {
    }

    public Schedule(Long id) {
        this.id = id;
    }

    public Schedule(Long id, String title, String content, int repeat, java.util.Date remind_time, java.util.Date begin_time, java.util.Date complete_time) {
        this.id = id;
        this.title = title;
        this.content = content;
        this.repeat = repeat;
        this.remind_time = remind_time;
        this.begin_time = begin_time;
        this.complete_time = complete_time;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getScheduleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    /** Not-null value. */
    public String getContent() {
        return content;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContent(String content) {
        this.content = content;
    }

    public int getRepeat() {
        return repeat;
    }

    public void setRepeat(int repeat) {
        this.repeat = repeat;
    }

    /** Not-null value. */
    public java.util.Date getRemind_time() {
        return remind_time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRemind_time(java.util.Date remind_time) {
        this.remind_time = remind_time;
    }

    /** Not-null value. */
    public java.util.Date getBegin_time() {
        return begin_time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBegin_time(java.util.Date begin_time) {
        this.begin_time = begin_time;
    }

    /** Not-null value. */
    public java.util.Date getComplete_time() {
        return complete_time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setComplete_time(java.util.Date complete_time) {
        this.complete_time = complete_time;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Employee> getEmployees() {
        if (employees == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EmployeeDao targetDao = daoSession.getEmployeeDao();
            List<Employee> employeesNew = targetDao._querySchedule_Employees(id);
            synchronized (this) {
                if(employees == null) {
                    employees = employeesNew;
                }
            }
        }
        return employees;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEmployees() {
        employees = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
