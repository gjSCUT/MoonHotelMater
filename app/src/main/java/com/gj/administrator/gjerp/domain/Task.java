package com.gj.administrator.gjerp.domain;

import java.util.List;
import com.gj.administrator.gjerp.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.gj.administrator.gjerp.dao.DialogDao;
import com.gj.administrator.gjerp.dao.PartnerDao;
import com.gj.administrator.gjerp.dao.StaffDao;
import com.gj.administrator.gjerp.dao.SupplierDao;
import com.gj.administrator.gjerp.dao.TaskDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "TASK".
 */
public class Task {

    private Long id;
    /** Not-null value. */
    private String title;
    /** Not-null value. */
    private String content;
    private Long leader_id;
    private int period;
    /** Not-null value. */
    private String state;
    /** Not-null value. */
    private java.util.Date start_time;
    /** Not-null value. */
    private java.util.Date finish_time;
    private Long parenter_id;
    private Long supplier_id;
    private Long task_id;
    private Long dialog_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TaskDao myDao;

    private Staff leader;
    private Long leader__resolvedKey;

    private Partner parenter;
    private Long parenter__resolvedKey;

    private Supplier supplier;
    private Long supplier__resolvedKey;

    private Task parent;
    private Long parent__resolvedKey;

    private Dialog dialog;
    private Long dialog__resolvedKey;

    private List<Task> children;

    // KEEP FIELDS - put your custom fields here
    public final static int INSTANT = 0x0000000;
    public final static int MON = 0x0000001;
    public final static int TUES = 0x0000010;
    public final static int WED = 0x0000100;
    public final static int TUARS = 0x0001000;
    public final static int FRI = 0x0010000;
    public final static int SAT = 0x0100000;
    public final static int SUN = 0x1000000;
    public final static int[] PERIODS = {MON,TUES,WED,TUARS,FRI,SAT,SUN};
    // KEEP FIELDS END

    public Task() {
    }

    public Task(Long id) {
        this.id = id;
    }

    public Task(Long id, String title, String content, Long leader_id, int period, String state, java.util.Date start_time, java.util.Date finish_time, Long parenter_id, Long supplier_id, Long task_id, Long dialog_id) {
        this.id = id;
        this.title = title;
        this.content = content;
        this.leader_id = leader_id;
        this.period = period;
        this.state = state;
        this.start_time = start_time;
        this.finish_time = finish_time;
        this.parenter_id = parenter_id;
        this.supplier_id = supplier_id;
        this.task_id = task_id;
        this.dialog_id = dialog_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTaskDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    /** Not-null value. */
    public String getContent() {
        return content;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContent(String content) {
        this.content = content;
    }

    public Long getLeader_id() {
        return leader_id;
    }

    public void setLeader_id(Long leader_id) {
        this.leader_id = leader_id;
    }

    public int getPeriod() {
        return period;
    }

    public void setPeriod(int period) {
        this.period = period;
    }

    /** Not-null value. */
    public String getState() {
        return state;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setState(String state) {
        this.state = state;
    }

    /** Not-null value. */
    public java.util.Date getStart_time() {
        return start_time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStart_time(java.util.Date start_time) {
        this.start_time = start_time;
    }

    /** Not-null value. */
    public java.util.Date getFinish_time() {
        return finish_time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFinish_time(java.util.Date finish_time) {
        this.finish_time = finish_time;
    }

    public Long getParenter_id() {
        return parenter_id;
    }

    public void setParenter_id(Long parenter_id) {
        this.parenter_id = parenter_id;
    }

    public Long getSupplier_id() {
        return supplier_id;
    }

    public void setSupplier_id(Long supplier_id) {
        this.supplier_id = supplier_id;
    }

    public Long getTask_id() {
        return task_id;
    }

    public void setTask_id(Long task_id) {
        this.task_id = task_id;
    }

    public Long getDialog_id() {
        return dialog_id;
    }

    public void setDialog_id(Long dialog_id) {
        this.dialog_id = dialog_id;
    }

    /** To-one relationship, resolved on first access. */
    public Staff getLeader() {
        Long __key = this.leader_id;
        if (leader__resolvedKey == null || !leader__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StaffDao targetDao = daoSession.getStaffDao();
            Staff leaderNew = targetDao.load(__key);
            synchronized (this) {
                leader = leaderNew;
            	leader__resolvedKey = __key;
            }
        }
        return leader;
    }

    public void setLeader(Staff leader) {
        synchronized (this) {
            this.leader = leader;
            leader_id = leader == null ? null : leader.getId();
            leader__resolvedKey = leader_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Partner getParenter() {
        Long __key = this.parenter_id;
        if (parenter__resolvedKey == null || !parenter__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PartnerDao targetDao = daoSession.getPartnerDao();
            Partner parenterNew = targetDao.load(__key);
            synchronized (this) {
                parenter = parenterNew;
            	parenter__resolvedKey = __key;
            }
        }
        return parenter;
    }

    public void setParenter(Partner parenter) {
        synchronized (this) {
            this.parenter = parenter;
            parenter_id = parenter == null ? null : parenter.getId();
            parenter__resolvedKey = parenter_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Supplier getSupplier() {
        Long __key = this.supplier_id;
        if (supplier__resolvedKey == null || !supplier__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SupplierDao targetDao = daoSession.getSupplierDao();
            Supplier supplierNew = targetDao.load(__key);
            synchronized (this) {
                supplier = supplierNew;
            	supplier__resolvedKey = __key;
            }
        }
        return supplier;
    }

    public void setSupplier(Supplier supplier) {
        synchronized (this) {
            this.supplier = supplier;
            supplier_id = supplier == null ? null : supplier.getId();
            supplier__resolvedKey = supplier_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Task getParent() {
        Long __key = this.task_id;
        if (parent__resolvedKey == null || !parent__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            Task parentNew = targetDao.load(__key);
            synchronized (this) {
                parent = parentNew;
            	parent__resolvedKey = __key;
            }
        }
        return parent;
    }

    public void setParent(Task parent) {
        synchronized (this) {
            this.parent = parent;
            task_id = parent == null ? null : parent.getId();
            parent__resolvedKey = task_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Dialog getDialog() {
        Long __key = this.dialog_id;
        if (dialog__resolvedKey == null || !dialog__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DialogDao targetDao = daoSession.getDialogDao();
            Dialog dialogNew = targetDao.load(__key);
            synchronized (this) {
                dialog = dialogNew;
            	dialog__resolvedKey = __key;
            }
        }
        return dialog;
    }

    public void setDialog(Dialog dialog) {
        synchronized (this) {
            this.dialog = dialog;
            dialog_id = dialog == null ? null : dialog.getId();
            dialog__resolvedKey = dialog_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Task> getChildren() {
        if (children == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            List<Task> childrenNew = targetDao._queryTask_Children(id);
            synchronized (this) {
                if(children == null) {
                    children = childrenNew;
                }
            }
        }
        return children;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildren() {
        children = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public static String getPeriodString(int periodInt){
        if(periodInt == 0)
            return "Instant Task";
        else{
            String result = "";
            if((periodInt & MON ) !=0){
                result += 1+" ";
            }
            if((periodInt & TUES ) !=0){
                result += 2+" ";
            }
            if((periodInt & WED ) !=0){
                result += 3+" ";
            }
            if((periodInt & TUARS ) !=0){
                result += 4+" ";
            }
            if((periodInt & FRI ) !=0){
                result += 5+" ";
            }
            if((periodInt & SAT ) !=0){
                result += 6+" ";
            }
            if((periodInt & SUN ) !=0){
                result += 7+" ";
            }
            return "Period Task:"+ result;
        }

    }
    // KEEP METHODS END

}
